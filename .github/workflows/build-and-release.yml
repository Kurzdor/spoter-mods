name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 50

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ checkout
        run: |
          git gc --force
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Error: Failed to clone repository."
            exit 1
          }

      - name: Get push details
        id: push-details
        shell: pwsh
        run: |
          $commitHash = git rev-parse HEAD
          Write-Host "‚úÖ Commit hash: $commitHash"

          $commitMessage = git log -1 --pretty=%B
          Write-Host "‚úÖ Commit message: $commitMessage"

          # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
          $escapedCommitMessage = $commitMessage -replace '"', '`"' -replace "'", "''" -replace "`n", " " -replace "`r", " "
          Write-Host "‚úÖ Escaped commit message: $escapedCommitMessage"

          # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          $changedFiles = git diff --name-only HEAD^ HEAD
          Write-Host "‚úÖ Changed files:"
          $changedFiles | ForEach-Object { Write-Host "  $_" }

          # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          echo "commit_hash=$commitHash" >> $env:GITHUB_OUTPUT
          echo "commit_message=$escapedCommitMessage" >> $env:GITHUB_OUTPUT
          echo "changed_files=$($changedFiles -join ';')" >> $env:GITHUB_OUTPUT

      - name: Install Python 2.7
        id: install-python
        shell: pwsh
        run: |
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Python 2.7 –≤ PATH
          if (Test-Path "C:\Python27\python.exe") {
            Write-Host "‚úÖ Python 2.7 is already installed."
            & "C:\Python27\python.exe" --version
            exit 0
          }

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Chocolatey
          if (Get-Command choco -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ Chocolatey is already installed."
          } else {
            Write-Host "‚ùå Chocolatey is not installed. Installing now..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            Write-Host "‚úÖ Chocolatey installed successfully."
          }

          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python 2.7
          Write-Host "üöÄ Installing Python 2.7..."
          choco install python2 -y --force
          Write-Host "‚úÖ Python 2.7 installed successfully."

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          Write-Host "üîÑ Refreshing environment variables..."
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          Write-Host "‚úÖ Environment variables refreshed."

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python 2.7
          Write-Host "üîç Checking Python 2.7 installation..."
          & "C:\Python27\python.exe" --version
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Python 2.7 is available in PATH."
          } else {
            Write-Host "‚ùå Python 2.7 is not available in PATH. Please check the installation."
            exit 1
          }

          # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ PATH
          Write-Host "üìÇ Current PATH:"
          $env:PATH -split ";" | ForEach-Object { Write-Host "  $_" }

      - name: Check commit message for release keywords
        id: check_commit
        shell: pwsh
        run: |
          # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
          $commitMessage = "${{ steps.push-details.outputs.commit_message }}"
          $changedFiles = "${{ steps.push-details.outputs.changed_files }}" -split ";"

          Write-Host "üîç Checking commit message for release keywords..."

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
          $releasePattern = "(?i)release|—Ä–µ–ª–∏–∑"
          $allPattern = "(?i)all|–≤—Å–µ—Ö|–≤—Å–µ|–≤—Å—ë"

          $isRelease = $commitMessage -match $releasePattern
          $isAll = $commitMessage -match $allPattern

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ .github/game_version.json
          $isGameVersionChanged = $changedFiles -contains ".github/game_version.json"

          # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
          if ($isRelease) {
            Write-Host "‚úÖ Commit message contains release keyword."
            echo "is_release=true" >> $env:GITHUB_OUTPUT

            if ($isAll -or $isGameVersionChanged) {
              Write-Host "‚úÖ is_all=true"
              echo "is_all=true" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "‚úÖ is_all=false"
              echo "is_all=false" >> $env:GITHUB_OUTPUT
            }
          } else {
            Write-Host "‚ùå Commit message does not contain release keyword. Skipping build."
            echo "is_release=false" >> $env:GITHUB_OUTPUT
            echo "is_all=false" >> $env:GITHUB_OUTPUT
          }

      - name: Debug and Test
        id: debug-test
        shell: pwsh
        run: |
          Write-Host "üöÄ Debug information:"
          Write-Host "‚úÖ Commit hash: ${{ steps.push-details.outputs.commit_hash }}"
          Write-Host "‚úÖ Commit message: ${{ steps.push-details.outputs.commit_message }}"

          # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤ PowerShell
          $commitMessage = "${{ steps.push-details.outputs.commit_message }}"
          Write-Host "‚úÖ Escaped commit message in PowerShell: $commitMessage"

          # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤ Python 2.7
          & "C:\Python27\python.exe" -c "import sys; print('‚úÖ Escaped commit message in Python: ' + sys.argv[1].encode('utf-8').decode('utf-8'))" "$commitMessage"

          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
          Write-Host "üîÑ Environment variables after refresh:"
          $env:PATH -split ";" | ForEach-Object { Write-Host "  $_" }
