name: Build and Release

on:
  push:
    branches:
      - master # Workflow –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—É—à–µ –≤ –≤–µ—Ç–∫—É master

jobs:
  build:
    runs-on: windows-latest # –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows –¥–ª—è —Å–±–æ—Ä–∫–∏

    steps:
      # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 50 # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∫–æ–º–º–∏—Ç–æ–≤

      # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—à–µ
      - name: Get push details
        id: push-details
        shell: pwsh
        run: |
          # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
          $commitHash = git rev-parse HEAD
          Write-Host "‚úÖ Commit hash: $commitHash"

          # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—à–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞)
          $commitMessage = git log -1 --pretty=%B
          Write-Host "‚úÖ Commit message: $commitMessage"

          # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞
          $escapedCommitMessage = $commitMessage -replace '"', '`"' -replace "'", "''" -replace "`n", " " -replace "`r", " "
          Write-Host "‚úÖ Escaped commit message: $escapedCommitMessage"

          # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          $changedFiles = git diff --name-only HEAD^ HEAD
          Write-Host "‚úÖ Changed files:"
          $changedFiles | ForEach-Object { Write-Host "  $_" }

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          echo "commit_hash=$commitHash" >> $env:GITHUB_OUTPUT
          echo "commit_message=$escapedCommitMessage" >> $env:GITHUB_OUTPUT
          echo "changed_files=$($changedFiles -join ';')" >> $env:GITHUB_OUTPUT

      # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python 2.7 —á–µ—Ä–µ–∑ Chocolatey
      - name: Install Python 2.7
        id: install-python
        shell: pwsh
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Python 2.7
          if (Test-Path "C:\Python27\python.exe") {
              Write-Host "‚úÖ Python 2.7 is already installed."
              & "C:\Python27\python.exe" --version
              exit 0
          }

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Chocolatey
          if (Get-Command choco -ErrorAction SilentlyContinue) {
              Write-Host "‚úÖ Chocolatey is already installed."
          } else {
              Write-Host "‚ùå Chocolatey is not installed. Installing now..."
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
              try {
                  iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                  Write-Host "‚úÖ Chocolatey installed successfully."
              } catch {
                  Write-Host "‚ùå Error installing Chocolatey: $_"
                  exit 1
              }
          }

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python 2.7
          Write-Host "üöÄ Installing Python 2.7..."
          try {
              choco install python2 -y --force
              Write-Host "‚úÖ Python 2.7 installed successfully."
          } catch {
              Write-Host "‚ùå Error installing Python 2.7: $_"
              exit 1
          }

          # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          Write-Host "üîÑ Refreshing environment variables..."
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          Write-Host "‚úÖ Environment variables refreshed."

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Python 2.7 —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
          Write-Host "üîç Checking Python 2.7 installation..."
          & "C:\Python27\python.exe" --version
          if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ Python 2.7 is available in PATH."
          } else {
              Write-Host "‚ùå Python 2.7 is not available in PATH. Please check the installation."
              exit 1
          }

          # –õ–æ–≥–∏—Ä—É–µ–º PATH –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          Write-Host "üìÇ Current PATH:"
          $env:PATH -split ";" | ForEach-Object { Write-Host "  $_" }

      # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      - name: Check commit message for release keywords
        id: check_commit
        shell: pwsh
        run: |
          # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
          $commitMessage = "${{ steps.push-details.outputs.commit_message }}"
          Write-Host "üîç Checking commit message for release keywords..."

          # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          $changedFiles = "${{ steps.push-details.outputs.changed_files }}" -split ";"
          Write-Host "‚úÖ Changed files: $changedFiles"

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
          $releasePattern = "(?i)release|—Ä–µ–ª–∏–∑"
          $allPattern = "(?i)all|–≤—Å–µ—Ö|–≤—Å–µ|–≤—Å—ë"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
          $isRelease = $commitMessage -match $releasePattern
          $isAll = $commitMessage -match $allPattern

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–µ–Ω –ª–∏ —Ñ–∞–π–ª .github/game_version.json
          $isGameVersionChanged = $changedFiles -contains ".github/game_version.json"

          # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
          if ($isRelease) {
              Write-Host "‚úÖ Commit message contains release keyword."
              Write-Host "‚úÖ commit_message=$commitMessage"
              Write-Host "‚úÖ is_release=true"
              echo "commit_message=$commitMessage" >> $env:GITHUB_OUTPUT
              echo "is_release=true" >> $env:GITHUB_OUTPUT

              if ($isAll -or $isGameVersionChanged) {
                  Write-Host "‚úÖ is_all=true"
                  echo "is_all=true" >> $env:GITHUB_OUTPUT
              } else {
                  Write-Host "‚úÖ is_all=false"
                  echo "is_all=false" >> $env:GITHUB_OUTPUT
              }
          } else {
              Write-Host "‚ùå Commit message does not contain release keyword. Skipping build."
              Write-Host "‚ùå is_release=false"
              echo "is_release=false" >> $env:GITHUB_OUTPUT
              Write-Host "‚ùå is_all=false"
              echo "is_all=false" >> $env:GITHUB_OUTPUT
          }

      # –®–∞–≥ 5: –î–µ–±–∞–≥ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      - name: Debug and test
        id: debug-test
        shell: pwsh
        run: |
          # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
          Write-Host "üöÄ Debug information:"
          Write-Host "Commit hash: ${{ steps.push-details.outputs.commit_hash }}"
          Write-Host "Commit message: ${{ steps.push-details.outputs.commit_message }}"
          Write-Host "Changed files: ${{ steps.push-details.outputs.changed_files }}"
          Write-Host "Is release: ${{ steps.check_commit.outputs.is_release }}"
          Write-Host "Is all: ${{ steps.check_commit.outputs.is_all }}"
      
          # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ PowerShell
          $commitMessage = "${{ steps.push-details.outputs.commit_message }}"
          Write-Host "‚úÖ Escaped commit message in PowerShell: $commitMessage"
      
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è Python
          $env:PYTHONIOENCODING = "utf-8"
          Write-Host "‚úÖ Set PYTHONIOENCODING to utf-8."
      
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ Python
          & "C:\Python27\python.exe" -c "import sys; print('Python default encoding: ' + sys.getdefaultencoding())"
          & "C:\Python27\python.exe" -c "import sys; print('Python stdout encoding: ' + sys.stdout.encoding)"
          & "C:\Python27\python.exe" -c "import sys; print('Python file system encoding: ' + sys.getfilesystemencoding())"
      
          # –ò–∑–º–µ–Ω—è–µ–º –∫–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ UTF-8
          chcp 65001
      
          # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UTF-8
          & "C:\Python27\python.exe" -c "import sys; print('‚úÖ Escaped commit message in Python: ' + sys.argv[1].decode('utf-8'))" "$commitMessage"

      # –®–∞–≥ 6: –£–≥–ª—É–±–ª—ë–Ω–Ω—ã–π –¥–µ–±–∞–≥ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      - name: Deep debug and test variables
        id: deep-debug
        shell: pwsh
        run: |
          # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
          Write-Host "üöÄ Deep debug information:"
          Write-Host "Commit hash: ${{ steps.push-details.outputs.commit_hash }}"
          Write-Host "Commit message: ${{ steps.push-details.outputs.commit_message }}"
          Write-Host "Changed files: ${{ steps.push-details.outputs.changed_files }}"
          Write-Host "Is release: ${{ steps.check_commit.outputs.is_release }}"
          Write-Host "Is all: ${{ steps.check_commit.outputs.is_all }}"
      
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã
          $errors = @()
          if (-not "${{ steps.push-details.outputs.commit_hash }}") {
              $errors += "Commit hash is empty!"
          }
          if (-not "${{ steps.push-details.outputs.commit_message }}") {
              $errors += "Commit message is empty!"
          }
          if (-not "${{ steps.push-details.outputs.changed_files }}") {
              $errors += "Changed files list is empty!"
          }
          if (-not "${{ steps.check_commit.outputs.is_release }}") {
              $errors += "Is release flag is empty!"
          }
          if (-not "${{ steps.check_commit.outputs.is_all }}") {
              $errors += "Is all flag is empty!"
          }
      
          if ($errors.Count -gt 0) {
              Write-Host "‚ùå Errors found:"
              $errors | ForEach-Object { Write-Host " - $_" }
              exit 1
          } else {
              Write-Host "‚úÖ All variables are correctly set and passed."
          }