name: Build and Release

on:
  push:
    branches:
      - master  # ветка, на которую пушить изменения

jobs:
  build:
    runs-on: windows-latest  # Используем Windows для сборки

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Python 2.7 manually
      run: |
        # Скачиваем Python 2.7
        $pythonUrl = "https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi"
        $pythonInstaller = "$env:RUNNER_TEMP\python-2.7.18.amd64.msi"
        Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonInstaller

        # Устанавливаем Python 2.7
        Start-Process msiexec.exe -ArgumentList "/i $pythonInstaller /quiet" -Wait

        # Добавляем Python в PATH с использованием Environment Files
        $pythonPath = "C:\Python27"
        $pythonScriptsPath = "$pythonPath\Scripts"
        echo "$pythonPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "$pythonScriptsPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify Python installation
      run: |
        python --version
        pip --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Если у вас есть зависимости

    - name: Install GitHub CLI
      run: |
        winget install --id GitHub.cli

    - name: Read game versions and mod list from JSON
      id: versions
      run: |
        # Чтение данных из JSON-файла
        $data = Get-Content -Path .github/game_version.json -Raw | ConvertFrom-Json
        $wg_version = $data.CLIENT_VERSION_WG
        $lesta_version = $data.CLIENT_VERSION_RU
        $mod_list = $data.mod_list -join ","  # Преобразуем список модов в строку

        # Сохраняем данные в outputs для использования в следующих шагах
        echo "wg_version=$wg_version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "lesta_version=$lesta_version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "mod_list=$mod_list" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Run build script
      run: |
        python .github/createRelease.py ${{ steps.versions.outputs.lesta_version }} ${{ steps.versions.outputs.wg_version }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload WG Mod Archives
      run: |
        $mods = "${{ steps.versions.outputs.mod_list }}" -split ","
        foreach ($mod in $mods) {
          $archivePath = "$mod/zip/$mod.zip"
          if (Test-Path $archivePath) {
            echo "Uploading $archivePath"
            gh release upload v${{ github.run_number }} $archivePath --clobber
          } else {
            echo "Archive not found: $archivePath"
          }
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Lesta Mod Archives
      run: |
        $mods = "${{ steps.versions.outputs.mod_list }}" -split ","
        foreach ($mod in $mods) {
          $archivePath = "$mod/zip/${mod}_RU.zip"
          if (Test-Path $archivePath) {
            echo "Uploading $archivePath"
            gh release upload v${{ github.run_number }} $archivePath --clobber
          } else {
            echo "Archive not found: $archivePath"
          }
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}