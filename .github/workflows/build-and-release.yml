name: Build and Release

on:
  push:
    branches:
      - master  # Workflow –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—É—à–µ –≤ –≤–µ—Ç–∫—É master

jobs:
  build:
    runs-on: windows-latest  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows –¥–ª—è —Å–±–æ—Ä–∫–∏

    steps:
      # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 50  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∫–æ–º–º–∏—Ç–æ–≤

      # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—à–µ
      - name: Get push details
        id: push-details
        shell: pwsh
        run: |
          # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
          $commitHash = git rev-parse HEAD
          Write-Host "‚úÖ Commit hash: $commitHash"

          # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—à–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞)
          $commitMessage = git log -1 --pretty=%B
          Write-Host "‚úÖ Commit message: $commitMessage"

          # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞
          $escapedCommitMessage = $commitMessage -replace '"', '`"' -replace "'", "''" -replace "`n", " " -replace "`r", " "
          Write-Host "‚úÖ Escaped commit message: $escapedCommitMessage"

          # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          $changedFiles = git diff --name-only HEAD^ HEAD
          Write-Host "‚úÖ Changed files:"
          $changedFiles | ForEach-Object { Write-Host "  $_" }

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          echo "commit_hash=$commitHash" >> $env:GITHUB_OUTPUT
          echo "commit_message=$escapedCommitMessage" >> $env:GITHUB_OUTPUT
          echo "changed_files=$($changedFiles -join ';')" >> $env:GITHUB_OUTPUT

      # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python 2.7
      - name: Set up Python 2.7
        uses: LizardByte/setup-python-action@master
        with:
          python-version: '2.7'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é Python
        id: setup-python

      # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      - name: Check commit message for release keywords
        id: check_commit
        shell: pwsh
        run: |
          # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
          $commitMessage = "${{ steps.push-details.outputs.commit_message }}"
          Write-Host "üîç Checking commit message for release keywords..."

          # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          $changedFiles = "${{ steps.push-details.outputs.changed_files }}" -split ";"
          Write-Host "‚úÖ Changed files: $changedFiles"

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
          $releasePattern = "(?i)release|—Ä–µ–ª–∏–∑"
          $allPattern = "(?i)all|–≤—Å–µ—Ö|–≤—Å–µ|–≤—Å—ë"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
          $isRelease = $commitMessage -match $releasePattern
          $isAll = $commitMessage -match $allPattern

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–µ–Ω –ª–∏ —Ñ–∞–π–ª .github/game_version.json
          $isGameVersionChanged = $changedFiles -contains ".github/game_version.json"

          # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
          if ($isRelease) {
              Write-Host "‚úÖ Commit message contains release keyword."
              Write-Host "‚úÖ commit_message=$commitMessage"
              Write-Host "‚úÖ is_release=true"
              echo "commit_message=$commitMessage" >> $env:GITHUB_OUTPUT
              echo "is_release=true" >> $env:GITHUB_OUTPUT

              if ($isAll -or $isGameVersionChanged) {
                  Write-Host "‚úÖ is_all=true"
                  echo "is_all=true" >> $env:GITHUB_OUTPUT
              } else {
                  Write-Host "‚úÖ is_all=false"
                  echo "is_all=false" >> $env:GITHUB_OUTPUT
              }
          } else {
              Write-Host "‚ùå Commit message does not contain release keyword. Skipping build."
              Write-Host "‚ùå is_release=false"
              echo "is_release=false" >> $env:GITHUB_OUTPUT
              Write-Host "‚ùå is_all=false"
              echo "is_all=false" >> $env:GITHUB_OUTPUT
          }

      # –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ game_version.json –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–æ–≤
      - name: Process game_version.json and create mod list
        id: process_game_version
        shell: pwsh
        run: |
          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤
          $MOD_LIST = @()

          # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
          $isRelease = "${{ steps.check_commit.outputs.is_release }}" -eq "true"
          $isAll = "${{ steps.check_commit.outputs.is_all }}" -eq "true"
          $changedFiles = "${{ steps.push-details.outputs.changed_files }}" -split ";"
          $isGameVersionChanged = $changedFiles -contains ".github/game_version.json"

          Write-Host "üîç Processing game_version.json and creating mod list..."

          # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ game_version.json
          $gameVersionPath = ".github/game_version.json"
          if (Test-Path $gameVersionPath) {
              $gameVersionContent = Get-Content $gameVersionPath -Raw | ConvertFrom-Json
              $wg_version = $gameVersionContent.CLIENT_VERSION_WG
              $lesta_version = $gameVersionContent.CLIENT_VERSION_RU
              $modListFromFile = $gameVersionContent.mod_list

              Write-Host "‚úÖ CLIENT_VERSION_WG: $wg_version"
              Write-Host "‚úÖ CLIENT_VERSION_RU: $lesta_version"
              Write-Host "‚úÖ mod_list from file: $($modListFromFile -join ', ')"

              # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (4 —Ü–∏—Ñ—Ä—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏)
              if ($wg_version -match '^\d+\.\d+\.\d+\.\d+$' -and $lesta_version -match '^\d+\.\d+\.\d+\.\d+$') {
                  Write-Host "‚úÖ Version format is correct."
              } else {
                  Write-Host "‚ùå Version format is incorrect. Exiting."
                  exit 1
              }

              # –ï—Å–ª–∏ $isRelease –∏ $isAll –æ–±–∞ true, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ –≤ $MOD_LIST
              if ($isRelease -and $isAll) {
                  Write-Host "‚úÖ Adding all mods from mod_list to MOD_LIST..."
                  foreach ($mod in $modListFromFile) {
                      if ($MOD_LIST -notcontains $mod) {
                          $MOD_LIST += $mod
                          Write-Host "‚úÖ Added mod: $mod"
                      }
                  }
              }

              # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª game_version.json, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ –≤ $MOD_LIST
              if ($isGameVersionChanged) {
                  Write-Host "‚úÖ game_version.json changed. Adding all mods from mod_list to MOD_LIST..."
                  foreach ($mod in $modListFromFile) {
                      if ($MOD_LIST -notcontains $mod) {
                          $MOD_LIST += $mod
                          Write-Host "‚úÖ Added mod: $mod"
                      }
                  }
              }

              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω—ã
              foreach ($file in $changedFiles) {
                  if ($file -match '^(.+?)/source/') {
                      $modName = $matches[1]
                      if ($modListFromFile -contains $modName -and $MOD_LIST -notcontains $modName) {
                          $MOD_LIST += $modName
                          Write-Host "‚úÖ Added mod from changed files: $modName"
                      }
                  }
              }

              # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
              echo "wg_version=$wg_version" >> $env:GITHUB_OUTPUT
              echo "lesta_version=$lesta_version" >> $env:GITHUB_OUTPUT
              echo "mod_list=$($MOD_LIST -join ';')" >> $env:GITHUB_OUTPUT

              Write-Host "‚úÖ Final MOD_LIST: $($MOD_LIST -join ', ')"
          } else {
              Write-Host "‚ùå game_version.json not found. Exiting."
              exit 1
          }

      # –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ Python —Å–∫—Ä–∏–ø—Ç–∞ createRelease.py
      - name: Run createRelease.py
        id: run_create_release
        shell: pwsh
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
          $lesta_version = "${{ steps.process_game_version.outputs.lesta_version }}"
          $wg_version = "${{ steps.process_game_version.outputs.wg_version }}"
          $mod_list = "${{ steps.process_game_version.outputs.mod_list }}" -split ";"

          Write-Host "üîç Running createRelease.py with the following arguments:"
          Write-Host "‚úÖ lesta_version: $lesta_version"
          Write-Host "‚úÖ wg_version: $wg_version"
          Write-Host "‚úÖ mod_list: $($mod_list -join ', ')"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π
          if ($mod_list.Count -eq 0) {
              Write-Host "‚ùå MOD_LIST is empty. Skipping createRelease.py."
              exit 0
          }

          # –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
          $pythonScriptPath = ".github/createRelease.py"
          if (Test-Path $pythonScriptPath) {
              Write-Host "‚úÖ Running createRelease.py..."
              & "python" $pythonScriptPath $lesta_version $wg_version @mod_list
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "‚úÖ createRelease.py completed successfully."
              } else {
                  Write-Host "‚ùå createRelease.py failed with exit code $LASTEXITCODE."
                  exit 1
              }
          } else {
              Write-Host "‚ùå createRelease.py not found. Exiting."
              exit 1
          }

      # –®–∞–≥ 7.1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –º–æ–¥–æ–≤
      - name: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –º–æ–¥–æ–≤
        uses: actions/upload-artifact@v3
        with:
          name: built-mods
          path: |
            **/zip/*.zip
        continue-on-error: true

      # –®–∞–≥ 7.2: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Ä–µ–ª–∏–∑–æ–≤
      - name: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –º–æ–¥–æ–≤
        uses: actions/download-artifact@v3
        with:
          name: built-mods
          path: .
        continue-on-error: true

      # –®–∞–≥ 7.3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥–∞
      - name: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥–∞
        id: update_readme
        shell: pwsh
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
          $lesta_version = "${{ steps.process_game_version.outputs.lesta_version }}"
          $wg_version = "${{ steps.process_game_version.outputs.wg_version }}"
          $mod_list = "${{ steps.process_game_version.outputs.mod_list }}" -split ";"

          Write-Host "[DEBUG] Updating README.md for each mod..."

          foreach ($mod in $mod_list) {
              Write-Host "[DEBUG] Processing mod: $mod"

              $modPath = "$mod/README.md"
              $modVersionPath = "$mod/source/VERSION"

              # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏
              if (-not (Test-Path $modVersionPath)) {
                  Write-Host "‚ùå VERSION file not found for mod: $mod. Skipping README update."
                  continue
              }

              # –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Å–∏—é –º–æ–¥–∞
              try {
                  $modVersion = (Get-Content $modVersionPath -Raw | ConvertFrom-Json).version
                  Write-Host "[DEBUG] Mod version: $modVersion"
              } catch {
                  Write-Host "‚ùå Failed to parse VERSION file for mod: $mod. Skipping README update."
                  continue
              }

              $modReleaseDate = (Get-Date).ToString("yyyy-MM-dd")
              Write-Host "[DEBUG] Mod release date: $modReleaseDate"

              # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è README.md
              $newLines = @(
                  "# [$mod]: v$modVersion ($modReleaseDate)",
                  "### [**Download to World of Tanks [$wg_version]**](https://github.com/spoter/spoter-mods/releases/download/v7/$mod.zip)",
                  "### [**–°–∫–∞—á–∞—Ç—å –¥–ª—è Tanki Lesta [$lesta_version]**](https://github.com/spoter/spoter-mods/releases/download/v7/${mod}_RU.zip)",
                  "#"
              )

              # –ï—Å–ª–∏ —Ñ–∞–π–ª README.md —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
              if (Test-Path $modPath) {
                  $existingContent = Get-Content $modPath
                  if ($existingContent[0] -match "^# \[$mod\]: v\d+\.\d+ \(\d{4}-\d{2}-\d{2}\)$") {
                      $existingContent = $newLines + $existingContent[4..($existingContent.Length - 1)]
                  } else {
                      $existingContent = $newLines + $existingContent
                  }
                  Set-Content -Path $modPath -Value $existingContent
              } else {
                  # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π README.md
                  Set-Content -Path $modPath -Value $newLines
              }

              Write-Host "‚úÖ Updated README.md for mod: $mod"
          }

      # –®–∞–≥ 7.4: –ö–æ–º–º–∏—Ç –∏ –ø—É—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö README.md
      - name: –ö–æ–º–º–∏—Ç –∏ –ø—É—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö README.md
        id: commit_readme
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Checking for modified README.md files..."
          
          # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï README.md (–≤ –∫–æ—Ä–Ω–µ –∏ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö)
          git add README.md */README.md */*/README.md
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          $status = git status --porcelain
          if ($status) {
              Write-Host "[DEBUG] Changes detected in README.md. Committing changes..."
              git config --global user.name "github-actions[bot]"
              git config --global user.email "github-actions[bot]@users.noreply.github.com"
              git commit -m "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Ä–µ–ª–∏–∑–∞"
              git push
              Write-Host "‚úÖ README.md changes committed and pushed."
          } else {
              Write-Host "‚úÖ No changes in README.md. Skipping commit."
          }


      # –®–∞–≥ 8: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–æ–≤
      - name: Publish releases
        id: publish_releases
        shell: pwsh
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
          $lesta_version = "${{ steps.process_game_version.outputs.lesta_version }}"
          $wg_version = "${{ steps.process_game_version.outputs.wg_version }}"
          $mod_list = "${{ steps.process_game_version.outputs.mod_list }}" -split ";"

          Write-Host "üîç Starting release publishing process..."
          Write-Host "‚úÖ lesta_version: $lesta_version"
          Write-Host "‚úÖ wg_version: $wg_version"
          Write-Host "‚úÖ mod_list: $($mod_list -join ', ')"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
          if (-not $lesta_version) {
              Write-Host "‚ùå lesta_version is empty. Exiting."
              exit 1
          }
          if (-not $wg_version) {
              Write-Host "‚ùå wg_version is empty. Exiting."
              exit 1
          }
          if ($mod_list.Count -eq 0) {
              Write-Host "‚ùå mod_list is empty. Exiting."
              exit 1
          }

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (4 —Ü–∏—Ñ—Ä—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏)
          if (-not ($lesta_version -match '^\d+\.\d+\.\d+\.\d+$')) {
              Write-Host "‚ùå lesta_version format is incorrect. Expected format: X.X.X.X"
              exit 1
          }
          if (-not ($wg_version -match '^\d+\.\d+\.\d+\.\d+$')) {
              Write-Host "‚ùå wg_version format is incorrect. Expected format: X.X.X.X"
              exit 1
          }

          # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
          $publishStatus = @()

          # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É –∏ –ø—É–±–ª–∏–∫—É–µ–º —Ä–µ–ª–∏–∑
          foreach ($mod in $mod_list) {
              Write-Host "üîç Processing mod: $mod"

              # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –º–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ VERSION
              $modVersionPath = "$mod/source/VERSION"
              if (-not (Test-Path $modVersionPath)) {
                  Write-Host "‚ùå VERSION file not found for mod: $mod. Skipping."
                  $publishStatus += @{ Mod = $mod; Status = "Failed"; Reason = "VERSION file not found" }
                  continue
              }

              $modVersionContent = Get-Content $modVersionPath -Raw
              try {
                  $modVersion = ($modVersionContent | ConvertFrom-Json).version
                  Write-Host "‚úÖ Mod version: $modVersion"
              } catch {
                  Write-Host "‚ùå Failed to parse VERSION file for mod: $mod. Skipping."
                  $publishStatus += @{ Mod = $mod; Status = "Failed"; Reason = "Failed to parse VERSION file" }
                  continue
              }

              # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–±–æ—Ä–∫–∏
              $modReleaseDate = (Get-Date).ToString("yyyy-MM-dd")
              Write-Host "‚úÖ Mod release date: $modReleaseDate"

              # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ –∞—Ä—Ö–∏–≤–∞–º
              $wgArchivePath = "$mod/zip/${mod}_${wg_version}.zip"
              $lestaArchivePath = "$mod/zip/${mod}_${lesta_version}_RU.zip"

              # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
              if (-not (Test-Path $wgArchivePath)) {
                  Write-Host "‚ùå WG archive not found for mod: $mod. Skipping."
                  $publishStatus += @{ Mod = $mod; Status = "Failed"; Reason = "WG archive not found" }
                  continue
              }
              if (-not (Test-Path $lestaArchivePath)) {
                  Write-Host "‚ùå Lesta archive not found for mod: $mod. Skipping."
                  $publishStatus += @{ Mod = $mod; Status = "Failed"; Reason = "Lesta archive not found" }
                  continue
              }

              # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
              $releaseBody = "# [$mod]: v$modVersion ($modReleaseDate) " + 
              "### [**Download to World of Tanks [$wg_version]**](https://github.com/spoter/spoter-mods/releases/download/v7/$mod.zip) " + 
              "### [**–°–∫–∞—á–∞—Ç—å –¥–ª—è Tanki Lesta [$lesta_version]**](https://github.com/spoter/spoter-mods/releases/download/v7/${mod}_RU.zip) #"


              Write-Host "üîç Release body for mod $mod"
              Write-Host $releaseBody

              # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–ª–∏–∑ –Ω–∞ GitHub
              try {
                  Write-Host "üîç Publishing release for mod: $mod"
                  gh release create "v$modVersion" "$wgArchivePath" "$lestaArchivePath" --title "Release $mod v$modVersion" --notes "$releaseBody"
                  Write-Host "‚úÖ Successfully published release for mod: $mod"
                  $publishStatus += @{ Mod = $mod; Status = "Success"; Reason = "Release published" }
              } catch {
                  Write-Host "‚ùå Failed to publish release for mod: $mod. Error: $_"
                  $publishStatus += @{ Mod = $mod; Status = "Failed"; Reason = "Failed to publish release" }
              }
          }

          # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
          Write-Host "üîç Final publish status:"
          $publishStatus | ForEach-Object {
              Write-Host "‚úÖ Mod: $($_.Mod), Status: $($_.Status), Reason: $($_.Reason)"
          }

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
          $failedMods = $publishStatus | Where-Object { $_.Status -eq "Failed" }
          if ($failedMods.Count -gt 0) {
              Write-Host "‚ùå Some mods failed to publish. Exiting."
              exit 1
          } else {
              Write-Host "‚úÖ All mods published successfully."
          }

      # –®–∞–≥ 9: –î–µ–±–∞–≥ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      - name: Debug and test
        id: debug-test
        shell: pwsh
        run: |
          # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
          Write-Host "üöÄ Debug information:"
          Write-Host "Commit hash: ${{ steps.push-details.outputs.commit_hash }}"
          Write-Host "Commit message: ${{ steps.push-details.outputs.commit_message }}"
          Write-Host "Changed files: ${{ steps.push-details.outputs.changed_files }}"
          Write-Host "Is release: ${{ steps.check_commit.outputs.is_release }}"
          Write-Host "Is all: ${{ steps.check_commit.outputs.is_all }}"
          Write-Host "wg_version: ${{ steps.process_game_version.outputs.wg_version }}"
          Write-Host "lesta_version: ${{ steps.process_game_version.outputs.lesta_version }}"
          Write-Host "mod_list: ${{ steps.process_game_version.outputs.mod_list }}"

          # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ PowerShell
          $commitMessage = "${{ steps.push-details.outputs.commit_message }}"
          Write-Host "‚úÖ Escaped commit message in PowerShell: $commitMessage"

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –∏ Python
          Write-Host "üîç Checking console encoding for Python..."
          & "python" -c "import sys; print('Python default encoding: ' + sys.getdefaultencoding())"
          & "python" -c "import sys; print('Python stdout encoding: ' + (sys.stdout.encoding or 'None'))"
          & "python" -c "import sys; print('Python file system encoding: ' + sys.getfilesystemencoding())"

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è Python
          $env:PYTHONIOENCODING = "utf-8"
          Write-Host "‚úÖ Set PYTHONIOENCODING to utf-8."

          # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UTF-8
          Write-Host "üîç Testing Python output with special characters..."
          & "python" -c "import sys; print('‚úÖ Escaped commit message in Python: ' + sys.argv[1].encode('utf-8').decode('utf-8'))" "$commitMessage"

          # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
          $testMessage = "Test message with special characters: \`nNew line, \`tTab, 'Single quotes', \`"Double quotes\`", —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç"
          Write-Host "üîç Testing Python output with special characters: $testMessage"
          & "python" -c "import sys; print('‚úÖ Test message in Python: ' + sys.argv[1].encode('utf-8').decode('utf-8'))" "$testMessage"