name: Build and Release Mods

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # üîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      - name: üîç –®–∞–≥ 1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3
        with:
          fetch-depth: 50

      # üîç –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python 2.7
      - name: üîç –®–∞–≥ 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python 2.7
        uses: actions/setup-python@v5
        with:
          python-version: "2.7"

      # üîç –®–∞–≥ 3: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
      - name: üîç –®–∞–≥ 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        shell: pwsh
        run: |
          Write-Host "üöÄ [DEBUG] Installing required Python dependencies..."
          python -m pip install --upgrade pip setuptools wheel
          Write-Host "‚úÖ [DEBUG] Dependencies installed successfully."

      # üîç –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏ –º–æ–¥–æ–≤
      - name: üîç –®–∞–≥ 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–æ–≤
        id: process_game_version
        shell: pwsh
        run: |
          Write-Host "üöÄ [DEBUG] Processing mod versions..."
          $lesta_version="1.23.4.5"
          $wg_version="2.34.5.6"
          $mod_list="mod1;mod2;mod3"
          echo "lesta_version=$lesta_version" >> $env:GITHUB_ENV
          echo "wg_version=$wg_version" >> $env:GITHUB_ENV
          echo "mod_list=$mod_list" >> $env:GITHUB_ENV
          Write-Host "‚úÖ [DEBUG] Versions processed: Lesta=$lesta_version, WG=$wg_version, Mods=($mod_list)"

      # üîç –®–∞–≥ 5: –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –º–æ–¥–æ–≤
      - name: üîç –®–∞–≥ 5. –ó–∞–ø—É—Å–∫ createRelease.py
        shell: pwsh
        run: |
          Write-Host "üöÄ [DEBUG] Running createRelease.py..."
          & python .github/createRelease.py ${{ env.lesta_version }} ${{ env.wg_version }} ${{ env.mod_list }}
          Write-Host "‚úÖ [DEBUG] createRelease.py execution finished."

      # üîç –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
      - name: üîç –®–∞–≥ 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –º–æ–¥–æ–≤
        uses: actions/upload-artifact@v4
        with:
          name: built-mods
          path: "**/zip/*.zip"

      # üîç –®–∞–≥ 7: –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
      - name: üîç –®–∞–≥ 7. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
        uses: actions/download-artifact@v4
        with:
          name: built-mods
          path: .

      # üîç –®–∞–≥ 8: –†–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏—è built-mods.zip
      - name: üîç –®–∞–≥ 8. –†–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏—è built-mods.zip –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
        shell: pwsh
        run: |
          Write-Host "üîç [DEBUG] Checking for built-mods.zip..."
          if (-Not (Test-Path "built-mods.zip")) {
              Write-Host "‚ùå built-mods.zip not found! Skipping extraction."
              exit 1
          }

          Write-Host "üîç [DEBUG] Extracting built-mods.zip..."
          Expand-Archive -Path built-mods.zip -DestinationPath . -Force
          Write-Host "‚úÖ [DEBUG] Extraction complete."
          Get-ChildItem -Path . -Recurse | ForEach-Object { Write-Host "üîç [DEBUG] Extracted file: $_" }

      # üîç –®–∞–≥ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å–ª–µ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
      - name: üîç –®–∞–≥ 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å–ª–µ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        shell: pwsh
        run: |
          Write-Host "üîç [DEBUG] Listing extracted release files:"
          Get-ChildItem -Path . -Recurse -Filter "*.zip" | ForEach-Object { Write-Host "üîç [DEBUG] Found archive: $_" }

      # üöÄ –®–∞–≥ 10: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–æ–≤
      - name: üöÄ –®–∞–≥ 10. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–æ–≤
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "üöÄ [DEBUG] Starting release publishing process..."
          $mod_list="${{ env.mod_list }}" -split ";"

          foreach ($mod in $mod_list) {
              Write-Host "üîç [DEBUG] Processing mod: $mod"

              $wgArchivePath = "$mod/zip/${mod}_${{ env.wg_version }}.zip"
              $lestaArchivePath = "$mod/zip/${mod}_${{ env.lesta_version }}_RU.zip"

              Write-Host "üîç [DEBUG] Checking WG archive path: $wgArchivePath"
              Write-Host "üîç [DEBUG] Checking Lesta archive path: $lestaArchivePath"

              if (-not (Test-Path $wgArchivePath)) {
                  Write-Host "‚ùå WG archive not found for mod: $mod. Skipping."
                  continue
              }
              if (-not (Test-Path $lestaArchivePath)) {
                  Write-Host "‚ùå Lesta archive not found for mod: $mod. Skipping."
                  continue
              }

              try {
                  Write-Host "üöÄ [DEBUG] Publishing release for mod: $mod"
                  gh release create "v1.0.0" "$wgArchivePath" "$lestaArchivePath" --title "Release $mod"
                  Write-Host "‚úÖ Successfully published release for mod: $mod"
              } catch {
                  Write-Host "‚ùå Failed to publish release for mod: $mod. Error: $_"
              }
          }

      # üõ†Ô∏è –®–∞–≥ 11: –ò—Ç–æ–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      - name: üõ†Ô∏è –®–∞–≥ 11. –ò—Ç–æ–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        shell: pwsh
        run: |
          Write-Host "üîç [DEBUG-TEST] Checking extracted .zip files after release:"
          Get-ChildItem -Path . -Recurse -Filter "*.zip" | ForEach-Object { Write-Host "üîç [DEBUG-TEST] Archive found: $_" }

          Write-Host "üîç [DEBUG-TEST] Checking for failed release logs:"
          Get-Content -Path "job-logs.txt" -Tail 50 | ForEach-Object { Write-Host "üîç [DEBUG-TEST] $_" }

          Write-Host "üîç [DEBUG-TEST] Checking if all mods were processed correctly..."
          foreach ($mod in $mod_list) {
              $wgArchivePath = "$mod/zip/${mod}_${{ env.wg_version }}.zip"
              $lestaArchivePath = "$mod/zip/${mod}_${{ env.lesta_version }}_RU.zip"

              if (Test-Path $wgArchivePath) {
                  Write-Host "‚úÖ [DEBUG-TEST] Found WG archive for mod: $mod"
              } else {
                  Write-Host "‚ùå [DEBUG-TEST] MISSING WG archive for mod: $mod"
              }

              if (Test-Path $lestaArchivePath) {
                  Write-Host "‚úÖ [DEBUG-TEST] Found Lesta archive for mod: $mod"
              } else {
                  Write-Host "‚ùå [DEBUG-TEST] MISSING Lesta archive for mod: $mod"
              }
          }
